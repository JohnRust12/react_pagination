{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pagesCount","Math","ceil","isFirstPage","islastPage","PrevNextPage","direction","className","classNames","disabled","href","onClick","map","page","active","items","options","App","useState","setPerPage","setCurrentPage","length","itemsCount","slice","id","value","onChange","event","target","option","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCGIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaX,EAAW,EAAGY,KAAKC,KAAKN,EAAQC,IAC7CM,EAA8B,IAAhBL,EACdM,EAAaN,IAAgBG,KAAKC,KAAKN,EAAQC,GAE/CQ,EAAe,SAACC,GACfF,GAA4B,SAAdE,GACjBP,EAAaD,EAAc,GAGxBK,GAA6B,SAAdG,GAClBP,EAAaD,EAAc,IAI/B,OACE,qBAAIS,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUN,IAAnD,SACE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAAeP,EACfQ,QAAS,kBAAMN,EAAa,SAL9B,oBAWAL,EAAWY,KAAI,SAAAC,GAAI,OACjB,oBAEEN,UACEC,IAAW,YAAa,CAAEM,OAAQhB,IAAgBe,IAHtD,SAME,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMZ,EAAac,IAJ9B,SAMGA,KAXEA,MAgBX,oBAAIN,UAAWC,IAAW,YAAa,CAAEC,SAAUL,IAAnD,SACE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAAS,kBAAMN,EAAa,SAL9B,wBC1DFU,EAAQ1B,EAAW,EAAG,IAAIuB,KAAI,SAAAnB,GAAC,qBAAYA,MAC3CuB,EAAU,CAAC,EAAG,EAAG,GAAI,IAEdC,EAAgB,WAC3B,MAA8BC,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBsB,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOpB,EAAP,KAAoBsB,EAApB,KAEM9B,GAAQQ,EAAc,GAAKD,EAC3BN,EAAKO,EAAcD,EAAUkB,EAAMM,OACrCN,EAAMM,OACNvB,EAAcD,EACZyB,EAAaP,EAAMQ,MAAMjC,EAAMC,GAErC,OACE,sBAAKgB,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWT,EADX,mBACiCR,EAAO,EADxC,cAC+CC,EAD/C,eACwDwB,EAAMM,OAD9D,OAIA,sBAAKd,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAO5B,EACP6B,SAAU,SAAAC,GACRR,GAAYQ,EAAMC,OAAOH,OACzBL,EAAe,IAPnB,SAUGJ,EAAQJ,KAAI,SAAAiB,GAAM,OACjB,wBAAqBJ,MAAOI,EAA5B,SAAqCA,GAAxBA,UAKnB,uBAAOC,QAAQ,kBAAkBvB,UAAU,qBAA3C,+BAIF,cAAC,EAAD,CACEX,MAAOmB,EAAMM,OACbxB,QAASA,EACTC,YAAaA,EACbC,aAAcqB,IAGhB,6BACGE,EAAWV,KAAI,SAAAmB,GAAI,OAClB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCtDnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d18c23cb.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number,\n  perPage: number,\n  currentPage: number,\n  onPageChange: (page: number) => void,\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const pagesCount = getNumbers(1, Math.ceil(total / perPage));\n  const isFirstPage = currentPage === 1;\n  const islastPage = currentPage === Math.ceil(total / perPage);\n\n  const PrevNextPage = (direction: string) => {\n    if (!islastPage && direction === 'next') {\n      onPageChange(currentPage + 1);\n    }\n\n    if (!isFirstPage && direction === 'prev') {\n      onPageChange(currentPage - 1);\n    }\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li className={classNames('page-item', { disabled: isFirstPage })}>\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={isFirstPage}\n          onClick={() => PrevNextPage('prev')}\n        >\n          «\n        </a>\n      </li>\n      {\n        pagesCount.map(page => (\n          <li\n            key={page}\n            className={\n              classNames('page-item', { active: currentPage === page })\n            }\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href={`#${page}`}\n              onClick={() => onPageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))\n      }\n      <li className={classNames('page-item', { disabled: islastPage })}>\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={islastPage}\n          onClick={() => PrevNextPage('next')}\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42).map(n => `Item ${n}`);\nconst options = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const from = (currentPage - 1) * perPage;\n  const to = currentPage * perPage > items.length\n    ? items.length\n    : currentPage * perPage;\n  const itemsCount = items.slice(from, to);\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${from + 1} - ${to} of ${items.length})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={event => {\n              setPerPage(+event.target.value);\n              setCurrentPage(1);\n            }}\n          >\n            {options.map(option => (\n              <option key={option} value={option}>{option}</option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={items.length}\n        perPage={perPage}\n        currentPage={currentPage}\n        onPageChange={setCurrentPage}\n      />\n\n      <ul>\n        {itemsCount.map(item => (\n          <li key={item} data-cy=\"item\">{item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}